import * as svelte from "https://esm.sh/svelte@3.46.2/compiler";

// INSERT BELOW
/* generated by Svelte v3.46.2 */
import {
	HtmlTag,
	SvelteComponent,
	append,
	append_styles,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	text
} from "https://esm.sh/svelte@3.46.2/internal";

/**
 * Compiles a Svelte component from source code and processes any warnings or JS code.
 *
 * @param {string} sourceCode - The source code of the Svelte component to compile.
 * @param {Object} compileOptions - Compilation options for the Svelte compiler.
 * @param {boolean} compileOptions.customElement - Whether to compile as a custom element (default: false).
 * @param {boolean} compileOptions.dev - Whether to compile in development mode (default: false).
 * @param {string} compileOptions.format - The output format for the compiled JS ('esm' by default).
 * @returns {Object} - An object containing the compiled JS code and any warnings.
 * @returns {string} return.compiledCode - The modified JS code for the Svelte component.
 * @returns {Array} return.warnings - The list of warnings encountered during compilation.
 */
function compileSvelteComponent(sourceCode, compileOptions) {
  const { js, warnings } = svelte.compile(sourceCode, compileOptions);

  const bytes = js.code.length;

  return {
    compiledCode: hack(js.code),
    warnings
  };
}

/**
 * Modifies the compiled Svelte JS code to make it compatible for dynamic execution.
 * Specifically, it replaces the import of "svelte/internal" with a CDN URL and adjusts the component's initialization.
 *
 * @param {string} code - The compiled JS code to modify.
 * @returns {string} - The modified JS code that can be used dynamically.
 */
let removed = "";
function hack(code) {
  const remove = '"svelte/internal";';
  removed = code.substr(0, code.indexOf(remove) + remove.length);
  removed = removed.replace(
    "svelte/internal",
    "https://esm.sh/svelte@3.46.2/internal"
  );

  let hacked = code
    .substr(code.indexOf(remove) + remove.length, code.length)
    .replace("export default Component;", "");
  hacked += `const app = new Component({target: document.querySelector('.app')});`;
  return hacked;
}

/**
 * Stores the last successfully compiled Svelte source code for future reference.
 *
 * @param {string} sourceCode - The source code of the Svelte component to store.
 */
let lastCode = null;
function storeLastCode(sourceCode) {
  lastCode = sourceCode;
}

const compileOptions = {
	customElement: false,
	dev: false,
	format: "esm"
};

/**
 * Renders a compiled Svelte component from the provided source code.
 *
 * @param {string} sourceCode - The source code of the Svelte component to compile and render.
 * @returns {string} - The compiled and modified JavaScript code that can be executed.
 */
function SveleteRenderer(sourceCode) {
  const compilationResult = compileSvelteComponent(sourceCode, compileOptions);
  return compilationResult.compiledCode;
}

export default SveleteRenderer;
